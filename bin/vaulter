#!/usr/bin/env python
import sys
import os
import click
import getpass

from vaulter import commands
from vaulter.vault_string import encrypt

if 'ANSIBLE_VAULT_PASSWORD_FILE' in os.environ:
    VAULT_PASSWORD_FILE = os.path.expanduser(
      os.environ.get('ANSIBLE_VAULT_PASSWORD_FILE')
    )
else:
    VAULT_PASSWORD_FILE = None

@click.group()
def cli(**kwargs):
    """A tool to edit inline vault encrypted yaml files"""
    pass

def common_options(function):
    function = click.option('--vault-password-file',
                            default=VAULT_PASSWORD_FILE,
                            help='Vault password file')(function)
    function = click.option('--ask-vault-pass',
                            is_flag=True,
                            help='Prompt for Vault password')(function)
    function = click.argument('yaml-file')(function)
    return function

def get_vault_password(vault_password, vault_password_file):
    if not vault_password_file and not vault_password:
        raise Exception('You must specify either --vault-password-file or --ask-vault-pass')
    if vault_password:
        return getpass.getpass(prompt='Vault Password: ', stream=None)
    if vault_password_file:
        return open(vault_password_file).read().rstrip()

@cli.command()
@common_options
def edit(yaml_file, vault_password_file, ask_vault_pass):
    """Edit a yaml file and encrypt values with Vault"""
    vault_pass = get_vault_password(ask_vault_pass, vault_password_file)
    commands.edit(yaml_file, vault_pass) # NOQA

@cli.command()
@click.option('--out-file',
              help='Write converted file to a different path',
              default=None)
@common_options
def convert(yaml_file, out_file, vault_password_file, ask_vault_pass):
    """Converts Vault encrypted yaml file to an inline encrypted yaml"""
    vault_pass = get_vault_password(ask_vault_pass, vault_password_file)
    commands.convert(yaml_file, vault_pass, out_file=out_file)

if __name__ == '__main__':
    cli()
